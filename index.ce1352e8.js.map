{"mappings":"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","sources":["src/JS/addpagination.js","src/JS/search-move.js"],"sourcesContent":["import axios from 'axios';\nimport Pagination from 'tui-pagination';\n// import 'tui-pagination/dist/tui-pagination.css';\nimport { addMarkup, getData } from './api-server';\n// import { showFilms, genre } from './search_my_genres';\nconst API_KEY = 'api_key=2913964819360854cc0ff757d62600b5';\nconst KEY = 'api_key=2913964819360854cc0ff757d62600b5';\nconst refs = {\n  currentPage: 1,\n  keyWord: '',\n  paginationBox: document.querySelector('.tui-pagination'),\n};\n\nexport async function getTrending(api_key, media_type, time_window, page) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/${media_type}/${time_window}?${api_key}&page=${page}`\n    );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction goToStart() {\n  window.scrollTo({\n    //! плавный скрол вверх\n    top: 0,\n    left: 0,\n    behavior: 'smooth',\n  });\n}\n\ngetTrending(API_KEY, 'movie', 'week', refs.currentPage).then(res => {\n  addMarkup(res.data.results);\n  pagination.reset(res.data.total_results);\n});\n\nconst cardCollection = document.querySelector('.film-card');\nconst container = document.getElementById('pagination');\n\nconst options = {\n  totalItems: 20,\n  itemsPerPage: 20,\n  visiblePages: 3,\n  page: refs.currentPage,\n  centerAlign: false,\n  firstItemClassName: 'tui-first-child',\n  lastItemClassName: 'tui-last-child',\n  template: {\n    page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage:\n      '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n      '<span class=\"tui-ico-ellip\">...</span>' +\n      '</a>',\n  },\n};\n\nconst pagination = new Pagination(container, options);\n\npagination.on('beforeMove', e => {\n  refs.currentPage = e.page;\n  // cardCollection.innerHTML = '';\n  getTrending(API_KEY, 'movie', 'week', refs.currentPage)\n    .then(res => {\n      addMarkup(res.data.results);\n    })\n    .then(goToStart());\n});\n\nconst paginationSearch = new Pagination(container, options);\n// ======================================================================\nimport searchMove from './search-move';\n\n// import genresArray from './genresArray';\nconst genresArray = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nconst form = document.querySelector('form#search-form');\nconst gallery = document.querySelector('.film-card');\n\nlet searchQuery = '';\n\nexport const formListener = form.addEventListener('submit', onSubmitForm);\n\nfunction renderCard(arr) {\n  const markup = arr\n    .map(({ poster_path, release_date, title, genre_ids, id }) => {\n      // заглушка на отсутствующий постер\n      let poster = `https://image.tmdb.org/t/p/w780${poster_path}`;\n      if (poster_path === null) {\n        poster =\n          'https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png';\n      }\n      // console.log(poster)\n      // ================================\n      let releaseYear = release_date.slice(0, 4);\n      let genresText = []; //! Перевод ID жанра в текст\n      genre_ids.forEach(genre => {\n        genresText.push(genresArray[genre]);\n      });\n      let genresTextWithCommas = genresText.map(genre => genre).join(', ');\n      return `<li class=\"card gallery__item\" id=\"${id}\" >\n    <a href=\"#\" class=\"card__link\">\n        <div class=\"card__wrapper-img\">\n        <img class=\"card__img\" src=\"${poster}\">\n        </div>\n        <div class=\"card__wrapper\">\n        <h3 class=\"card__title\">${title}</h3>\n        <p class=\"card__info\">${genresTextWithCommas} | <span class=\"card__info-genre\">${releaseYear}</span></p>\n        </div>\n    </a>\n  </li>`;\n    })\n    .join('');\n  gallery.innerHTML = '';\n  gallery.insertAdjacentHTML('beforeend', markup);\n}\n\nexport async function onSubmitForm(event) {\n  event.preventDefault();\n  refs.currentPage = 1;\n  searchQuery = event.currentTarget.searchQuery.value.trim();\n  if (searchQuery === '') {\n    return;\n  }\n  const searchResponse = await searchMove(searchQuery, refs.currentPage);\n  try {\n    if (searchResponse.total_results > 0) {\n      renderCard(searchResponse.results);\n      paginationSearch.reset(searchResponse.total_results);\n      paginationSearch.on('beforeMove', e => {\n        refs.currentPage = e.page;\n        const keyWord = searchQuery;\n        searchMove(keyWord, refs.currentPage)\n          .then(res => {\n            renderCard(res.results);\n          })\n          .then(goToStart());\n      });\n    } else {\n      gallery.innerHTML = `<li>\n            <img class=\"allert-box\" src=\"https://i.postimg.cc/BnKVk1zL/sorry.jpg\"></img>\n            </li>`;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  form.reset();\n}\n//  ========================================================================\nconst paginationGenres = new Pagination(container, options);\n\nconst searchBtn = document.querySelector('.genres-btn');\nconst select = document.querySelector('.genre-filter');\nlet genresList = [];\n\nsearchBtn.addEventListener('click', showFilms);\nselect.addEventListener('change', onSelectChange);\n\nasync function genre(genresListWithCommas, page) {\n  const apiData = await axios.get(\n    `https://api.themoviedb.org/3/discover/movie?${KEY}&with_genres=${genresListWithCommas}&page=${page}`\n  );\n  // console.log(apiData.data.results);\n  return apiData;\n}\n\nconst divRef = document.querySelector(`.film-card`);\n\nfunction addMarkupGenre(data) {\n  const tamplate = data\n    .map(({ title, release_date, poster_path, genre_ids, id }) => {\n      let releaseYear = release_date.slice(0, 4);\n\n      if (poster_path === null) {\n        //! Проверка на пустую картинку\n        poster =\n          'https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png';\n      }\n\n      let genresText = []; //! Перевод ID жанра в текст\n      genre_ids.forEach(genre => {\n        genresText.push(genresArray[genre]);\n      });\n      let genresTextWithCommas = genresText.map(genre => genre).join(', ');\n      let filmIMG = `https://image.tmdb.org/t/p/w780${poster_path}`;\n      if (poster_path === null || poster_path === undefined) {\n        filmIMG =\n          'https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png';\n      }\n\n      return `<li class=\"card gallery__item rotateY\" id=\"${id}\">\n      <a href=\"#\" class=\"card__link\">\n        <div class=\"card__wrapper-img\">\n        <img class=\"card__img\" src=${filmIMG} alt=\"movie's poster\">\n        </div>\n        <div class=\"card__wrapper\">\n        <h3 class=\"card__title\">${title}</h3>\n        <p class=\"card__info\">${genresTextWithCommas} | <span class=\"card__info-genre\">${releaseYear}</span></p>\n        </div>\n      </a>\n    </li>`;\n    })\n    .join('');\n  divRef.innerHTML = '';\n  divRef.innerHTML = tamplate;\n}\n\nasync function showFilms(e) {\n  //! Рендер разметки по нажатию на кнопку\n  e.preventDefault();\n  refs.currentPage = 1;\n  let genresListWithCommas = genresList.map(genre => genre).join(',');\n  genre(genresListWithCommas, refs.currentPage).then(res =>\n    addMarkupGenre(res.data.results)\n  );\n  // console.log(genresListWithCommas);\n  // paginationGenres.reset(genresListWithCommas.total_results)\n  paginationGenres.on('beforeMove', e => {\n    refs.currentPage = e.page;\n\n    genre(genresListWithCommas, refs.currentPage)\n      .then(res => {\n        addMarkupGenre(res.data.results);\n      })\n      .then(goToStart());\n  });\n}\n\nfunction onSelectChange(event) {\n  //! Добавляет в список жанры, если уже есть то удаляет\n  if (genresList.includes(event.target.id)) {\n    genresList.splice(genresList.indexOf('event.target.id', 1));\n  } else {\n    genresList.push(event.target.id);\n  }\n  // console.log(genresList);\n}\n","import axios from 'axios';\n\n\nexport default async function searchMove(value, pageNumber) {\n    const KEY = 'api_key=2913964819360854cc0ff757d62600b5'\n    const url = 'https://api.themoviedb.org/3/search/movie'\n    const filter = `?${KEY}&query=${value}&language=en-US&page=${pageNumber}&include_adult=false`\n    return await axios.get(`${url}${filter}`).then(response => response.data);\n  }"],"names":["$2shzp","parcelRequire","async","$516735037aba1826$export$2e2bcd8739ae039","value","pageNumber","filter","default","get","then","response","data","$ec5fe26d626ded48$var$API_KEY","$ec5fe26d626ded48$var$refs","currentPage","keyWord","paginationBox","document","querySelector","$ec5fe26d626ded48$export$998f00da2813713d","api_key","media_type","time_window","page","error","console","$ec5fe26d626ded48$var$goToStart","window","scrollTo","top","left","behavior","res","$fSg2y","addMarkup","results","$ec5fe26d626ded48$var$pagination","reset","total_results","$ec5fe26d626ded48$var$container","getElementById","$ec5fe26d626ded48$var$options","totalItems","itemsPerPage","visiblePages","centerAlign","firstItemClassName","lastItemClassName","template","moveButton","disabledMoveButton","moreButton","$parcel$interopDefault","$fb9GJ","on","e","$ec5fe26d626ded48$var$paginationSearch","$ec5fe26d626ded48$var$genresArray","$ec5fe26d626ded48$var$form","$ec5fe26d626ded48$var$gallery","$ec5fe26d626ded48$var$searchQuery","addEventListener","event","preventDefault","currentTarget","searchQuery","trim","searchResponse","$ec5fe26d626ded48$var$renderCard","innerHTML","log","arr","markup","map","poster_path","release_date","title","genre_ids","id","poster1","releaseYear","slice","genresText","forEach","genre","push","join","insertAdjacentHTML","$ec5fe26d626ded48$var$paginationGenres","$ec5fe26d626ded48$var$searchBtn","$ec5fe26d626ded48$var$select","$ec5fe26d626ded48$var$genresList","$ec5fe26d626ded48$var$genre","genresListWithCommas","$ec5fe26d626ded48$var$addMarkupGenre","includes","target","splice","indexOf","$ec5fe26d626ded48$var$divRef","tamplate","poster","filmIMG"],"version":3,"file":"index.ce1352e8.js.map"}
{"mappings":"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","sources":["src/JS/addpagination.js","src/JS/search-move.js"],"sourcesContent":["import axios from 'axios';\nimport Pagination from 'tui-pagination';\n// import 'tui-pagination/dist/tui-pagination.css';\nimport { addMarkup, getData } from './api-server';\n// import { showFilms, genre } from './search_my_genres';\nconst API_KEY = 'api_key=2913964819360854cc0ff757d62600b5';\nconst KEY = 'api_key=2913964819360854cc0ff757d62600b5';\nconst refs = {\n  currentPage: 1,\n  keyWord: '',\n  paginationBox: document.querySelector('.tui-pagination'),\n};\n\n\n\nexport async function getTrending(api_key, media_type, time_window, page) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/${media_type}/${time_window}?${api_key}&page=${page}`\n      );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction goToStart() {\n  window.scrollTo({ //! плавный скрол вверх\n    top: 0,\n    left: 0,\n    behavior: \"smooth\",\n  })\n};\n\ngetTrending(API_KEY, 'movie', 'week', refs.currentPage)\n  .then(res => {\n    addMarkup(res.data.results);\n    pagination.reset(res.data.total_results);\n  });\n\nconst cardCollection = document.querySelector('.film-card');\nconst container = document.getElementById('pagination');\n\n\nconst options = {\n  totalItems: 20,\n  itemsPerPage: 20,\n  visiblePages: 3,\n  page: refs.currentPage,\n  centerAlign: false,\n  firstItemClassName: 'tui-first-child',\n  lastItemClassName: 'tui-last-child',\n  template: {\n    page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage:\n      '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n      '<span class=\"tui-ico-ellip\">...</span>' +\n      '</a>',\n  },\n};\n\nconst pagination = new Pagination(container, options);\n\n\npagination.on('beforeMove', e => {\n    refs.currentPage = e.page;\n    cardCollection.innerHTML = '';\n    getTrending(API_KEY, 'movie', 'week', refs.currentPage)\n      .then(res => {\n        addMarkup(res.data.results)\n      }).then(goToStart())\n  })\n\n\nconst paginationSearch = new Pagination(container, options);\n// ======================================================================\nimport searchMove from \"./search-move\";\n\n\n// import genresArray from './genresArray';\nconst genresArray = {\n     28: \"Action\",\n     12: \"Adventure\",\n     16: \"Animation\",\n     35: \"Comedy\",\n     80: \"Crime\",\n     99: \"Documentary\",\n     18: \"Drama\",\n     10751: \"Family\",\n     14: \"Fantasy\",\n     36: \"History\",\n     27: \"Horror\",\n     10402: \"Music\",\n     9648: \"Mystery\",\n     10749: \"Romance\",\n     878: \"Science Fiction\",\n     10770: \"TV Movie\",\n     53: \"Thriller\",\n     10752: \"War\",\n     37: \"Western\"\n  }\n\n\nconst form = document.querySelector('form#search-form');\nconst gallery = document.querySelector('.film-card');\n\n\n\nlet searchQuery = '';\n\nexport const formListener = form.addEventListener('submit', onSubmitForm)\n\nfunction renderCard(arr) {\n    const markup = arr.map(({ poster_path, release_date, title, genre_ids, id }) => {\n        // заглушка на отсутствующий постер\n        let poster = `https://image.tmdb.org/t/p/w780${poster_path}`\n        if (poster_path === null) {\n            poster = 'https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png'\n        }\n        // console.log(poster)\n        // ================================\n        let releaseYear = release_date.slice(0, 4);\n         let genresText = [] //! Перевод ID жанра в текст\n  genre_ids.forEach(genre => {\n    genresText.push(genresArray[genre])\n  });\n  let genresTextWithCommas = genresText.map(genre => genre).join(', ')\n        return `<li class=\"card gallery__item\" id=\"${id}\" >\n    <a href=\"#\" class=\"card__link\">\n        <div class=\"card__wrapper-img\">\n        <img class=\"card__img\" src=\"${poster}\">\n        </div>\n        <div class=\"card__wrapper\">\n        <h3 class=\"card__title\">${title}</h3>\n        <p class=\"card__info\">${genresTextWithCommas} | <span class=\"card__info-genre\">${releaseYear}</span></p>\n        </div>\n    </a>\n  </li>`;\n    }).join('');\n    gallery.innerHTML = '';\n    gallery.insertAdjacentHTML('beforeend', markup)\n}\n\nexport async function onSubmitForm(event) {\n  event.preventDefault()\n  refs.currentPage = 1;\n  searchQuery = event.currentTarget.searchQuery.value.trim()\n  if (searchQuery === '') {\n    return\n  }\n  const searchResponse = await searchMove(searchQuery, refs.currentPage)\n  try {\n    if (searchResponse.total_results > 0) {\n      renderCard(searchResponse.results)\n      paginationSearch.reset(searchResponse.total_results);\n      paginationSearch.on('beforeMove', e => {\n        refs.currentPage = e.page;\n        const keyWord = searchQuery;\n        searchMove(keyWord, refs.currentPage)\n          .then(res => {\n            renderCard(res.results)\n          }).then(goToStart())\n      })\n    } else {\n      gallery.innerHTML = `<li>\n            <img class=\"allert-box\" src=\"https://i.postimg.cc/BnKVk1zL/sorry.jpg\"></img>\n            </li>`\n    }\n  }\n  catch (error) {\n    console.log(error)\n        \n  }\n    \n\n  form.reset()\n}\n//  ========================================================================\nconst paginationGenres = new Pagination(container, options);\n\nconst searchBtn = document.querySelector('.genres-btn')\nconst select = document.querySelector('.genre-filter')\nlet genresList = []\n\nsearchBtn.addEventListener('click', showFilms)\nselect.addEventListener('change', onSelectChange)\n\n\nasync function genre(genresListWithCommas, page) {\n   const apiData = await axios.get(\n   `https://api.themoviedb.org/3/discover/movie?${KEY}&with_genres=${genresListWithCommas}&page=${page}`\n   );\n   // console.log(apiData.data.results);\n   return apiData;\n}\n\nconst divRef = document.querySelector(`.film-card`)\n\nfunction addMarkupGenre(data) {\nconst tamplate = data.map(({ title, release_date, poster_path, genre_ids, id}) => {\n   let releaseYear = release_date.slice(0, 4);\n\n   if (poster_path === null) { //! Проверка на пустую картинку\n            poster = 'https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png'\n      }\n   \n   let genresText = [] //! Перевод ID жанра в текст\n   genre_ids.forEach(genre => {\n      genresText.push(genresArray[genre])\n   });\n   let genresTextWithCommas = genresText.map(genre => genre).join(', ')\n\n   return `<li class=\"card gallery__item rotateY\" id=\"${id}\">\n      <a href=\"#\" class=\"card__link\">\n         <div class=\"card__wrapper-img\">\n         <img class=\"card__img\" src=\"https://image.tmdb.org/t/p/w780/${poster_path}\" alt=\"movie's poster\">\n         </div>\n         <div class=\"card__wrapper\">\n         <h3 class=\"card__title\">${title}</h3>\n         <p class=\"card__info\">${genresTextWithCommas} | <span class=\"card__info-genre\">${releaseYear}</span></p>\n         </div>\n      </a>\n   </li>`;\n   })\n   .join('');\ndivRef.innerHTML = tamplate; \n};\n\nasync function showFilms(e) { //! Рендер разметки по нажатию на кнопку\n  e.preventDefault()\n  refs.currentPage = 1;\n  let genresListWithCommas = genresList.map(genre => genre).join(',')\n  genre(genresListWithCommas, refs.currentPage).then(res => addMarkupGenre(res.data.results))\n  // console.log(genresListWithCommas);\n  // paginationGenres.reset(genresListWithCommas.total_results)\n  paginationGenres.on('beforeMove', e => {\n    refs.currentPage = e.page;\n    divRef.innerHTML = '';\n    genre(genresListWithCommas, refs.currentPage)\n      .then(res => {\n        addMarkupGenre(res.data.results)\n      }).then(goToStart())\n  })\n};\n\n      \nfunction onSelectChange(event) { //! Добавляет в список жанры, если уже есть то удаляет\n   if (genresList.includes(event.target.id)){\n      genresList.splice(genresList.indexOf('event.target.id',1))\n   } else {\n      genresList.push(event.target.id)\n   }\n   // console.log(genresList);\n}\n\n\n\n\n","import axios from 'axios';\n\n\nexport default async function searchMove(value, pageNumber) {\n    const KEY = 'api_key=2913964819360854cc0ff757d62600b5'\n    const url = 'https://api.themoviedb.org/3/search/movie'\n    const filter = `?${KEY}&query=${value}&language=en-US&page=${pageNumber}&include_adult=false`\n    return await axios.get(`${url}${filter}`).then(response => response.data);\n  }"],"names":["$2shzp","parcelRequire","async","$516735037aba1826$export$2e2bcd8739ae039","value","pageNumber","filter","default","get","then","response","data","$ec5fe26d626ded48$var$API_KEY","$ec5fe26d626ded48$var$refs","currentPage","keyWord","paginationBox","document","querySelector","$ec5fe26d626ded48$export$998f00da2813713d","api_key","media_type","time_window","page","error","console","$ec5fe26d626ded48$var$goToStart","window","scrollTo","top","left","behavior","res","$fSg2y","addMarkup","results","$ec5fe26d626ded48$var$pagination","reset","total_results","$ec5fe26d626ded48$var$cardCollection","$ec5fe26d626ded48$var$container","getElementById","$ec5fe26d626ded48$var$options","totalItems","itemsPerPage","visiblePages","centerAlign","firstItemClassName","lastItemClassName","template","moveButton","disabledMoveButton","moreButton","$parcel$interopDefault","$fb9GJ","on","e","innerHTML","$ec5fe26d626ded48$var$paginationSearch","$ec5fe26d626ded48$var$genresArray","$ec5fe26d626ded48$var$form","$ec5fe26d626ded48$var$gallery","$ec5fe26d626ded48$var$searchQuery","addEventListener","event","preventDefault","currentTarget","searchQuery","trim","searchResponse","$ec5fe26d626ded48$var$renderCard","log","arr","markup","map","poster_path","release_date","title","genre_ids","id","poster1","releaseYear","slice","genresText","forEach","genre","push","join","insertAdjacentHTML","$ec5fe26d626ded48$var$paginationGenres","$ec5fe26d626ded48$var$searchBtn","$ec5fe26d626ded48$var$select","$ec5fe26d626ded48$var$genresList","$ec5fe26d626ded48$var$genre","genresListWithCommas","$ec5fe26d626ded48$var$addMarkupGenre","$ec5fe26d626ded48$var$divRef","includes","target","splice","indexOf","tamplate","poster"],"version":3,"file":"index.d319a268.js.map"}